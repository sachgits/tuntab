{"version":3,"sources":["updateSchema.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AASA,0CAAC;MACK,MAAM;;;;;;iBAAU,oEAAmC;;;AAAnD,gBAAM;;AACV,cAAI,MAAM,CAAC,MAAM,EAAE;AACjB,mBAAO,CAAC,KAAK,CACX,8BAA8B,EAC9B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CACvC,CAAC;WACH,MAAM;AACL,yBAAG,aAAa,CACd,eAAK,IAAI,CAAC,SAAS,EAAE,qBAAqB,CAAC,EAC3C,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAChC,CAAC;WACH;;;;;;;;CACF,IAAG;;;AAAC,AAGL,aAAG,aAAa,CACd,eAAK,IAAI,CAAC,SAAS,EAAE,wBAAwB,CAAC,EAC9C,2CAAmB,CACpB,CAAC","file":"updateSchema-compiled.js","sourcesContent":["#!/usr/bin/env babel-node --optional es7.asyncFunctions\r\n\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { Schema } from '../data/schema';\r\nimport { graphql }  from 'graphql';\r\nimport { introspectionQuery, printSchema } from 'graphql/utilities';\r\n\r\n// Save JSON of full schema introspection for Babel Relay Plugin to use\r\n(async () => {\r\n  var result = await (graphql(Schema, introspectionQuery));\r\n  if (result.errors) {\r\n    console.error(\r\n      'ERROR introspecting schema: ',\r\n      JSON.stringify(result.errors, null, 2)\r\n    );\r\n  } else {\r\n    fs.writeFileSync(\r\n      path.join(__dirname, '../data/schema.json'),\r\n      JSON.stringify(result, null, 2)\r\n    );\r\n  }\r\n})();\r\n\r\n// Save user readable type system shorthand of schema\r\nfs.writeFileSync(\r\n  path.join(__dirname, '../data/schema.graphql'),\r\n  printSchema(Schema)\r\n);\r\n"]}